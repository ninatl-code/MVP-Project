import { useEffect, useState } from 'react';
import { View, Alert } from 'react-native';
import { supabase } from '../lib/supabaseClient';

export default function RealTimeNotifications({ userId, triggerNotification }) {
  const [notifications, setNotifications] = useState([])
  const [showRatingModal, setShowRatingModal] = useState(false)
  const [currentRatingRequest, setCurrentRatingRequest] = useState(null)
  const [rating, setRating] = useState(0)
  const [comment, setComment] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Fonction pour convertir la dur√©e en heures selon l'unit√©
  const convertDurationToHours = (duree, unit_tarif) => {
    if (!duree || !unit_tarif) return 0;
    
    switch (unit_tarif) {
      case 'heure':
        return duree;
      case 'demi_journee':
        return duree * 4;
      case 'journee':
        return duree * 8;
      case 'seance':
        return duree * 24;
      case 'forfait':
        return duree * 24;
      default:
        return duree; // Par d√©faut, on consid√®re que c'est en heures
    }
  };

  // Fonction pour v√©rifier et mettre √† jour les r√©servations expir√©es
  const checkAndUpdateExpiredReservations = async () => {
    try {
      console.log('üïê V√©rification des r√©servations expir√©es...');
      
      // R√©cup√©rer toutes les r√©servations confirm√©es qui ne sont pas encore termin√©es
      const { data: reservations, error } = await supabase
        .from('reservations')
        .select('id, date, duree, unit_tarif, status, particulier_id')
        .in('status', ['confirmed', 'paid'])
        .not('date', 'is', null)
        .not('duree', 'is', null);

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©servations:', error);
        return;
      }

      if (!reservations || reservations.length === 0) {
        console.log('üìù Aucune r√©servation √† v√©rifier');
        return;
      }

      const now = new Date();
      const expiredReservations = [];

      reservations.forEach(reservation => {
        const startDate = new Date(reservation.date);
        const durationInHours = convertDurationToHours(reservation.duree, reservation.unit_tarif);
        const endDate = new Date(startDate.getTime() + (durationInHours * 60 * 60 * 1000));

        console.log(`üîç R√©servation ${reservation.id}:`, {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString(),
          now: now.toISOString(),
          durationInHours,
          isExpired: now >= endDate
        });

        if (now >= endDate) {
          expiredReservations.push(reservation);
        }
      });

      if (expiredReservations.length > 0) {
        console.log(`‚úÖ ${expiredReservations.length} r√©servation(s) √† marquer comme termin√©e(s):`, expiredReservations.map(r => r.id));
        
        // Mettre √† jour le statut des r√©servations expir√©es
        const { data: updatedReservations, error: updateError } = await supabase
          .from('reservations')
          .update({ status: 'finished' })
          .in('id', expiredReservations.map(r => r.id))
          .select('id, particulier_id');

        if (updateError) {
          console.error('‚ùå Erreur lors de la mise √† jour des r√©servations:', updateError);
        } else {
          console.log('üéâ R√©servations mises √† jour avec succ√®s:', updatedReservations);
          
          // Cr√©er des notifications pour informer les particuliers que leurs r√©servations sont termin√©es
          if (updatedReservations && updatedReservations.length > 0) {
            // R√©cup√©rer les informations compl√®tes des r√©servations pour la notification
            const { data: fullReservations } = await supabase
              .from('reservations')
              .select('id, particulier_id, annonce_id')
              .in('id', updatedReservations.map(r => r.id));

            const notifications = fullReservations.map(reservation => ({
              user_id: reservation.particulier_id,
              type: 'avis',
              contenu: 'F√©licitations ! Votre r√©servation vient de se terminer. Partagez votre exp√©rience avec la communaut√© en donnant votre avis sur cette prestation.',
              lu: false,
              reservation_id: reservation.id,
              annonce_id: reservation.annonce_id,
              created_at: new Date().toISOString()
            }));

            const { error: notificationError } = await supabase
              .from('notifications')
              .insert(notifications);

            if (notificationError) {
              console.error('‚ùå Erreur lors de la cr√©ation des notifications:', notificationError);
            } else {
              console.log('üì¨ Notifications d\'avis cr√©√©es pour les r√©servations termin√©es');
            }
          }
        }
      } else {
        console.log('üìù Aucune r√©servation expir√©e trouv√©e');
      }
    } catch (error) {
      console.error('‚ùå Erreur dans checkAndUpdateExpiredReservations:', error);
    }
  };

  // 1. Charger les notifications existantes et v√©rifier les r√©servations expir√©es
  useEffect(() => {
    if (!userId) return

    const fetchNotifications = async () => {
      // V√©rifier les r√©servations expir√©es avant de charger les notifications
      await checkAndUpdateExpiredReservations();

      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })

      if (!error && data) {
        console.log('üîî Notifications r√©cup√©r√©es:', data.length)
        setNotifications(data)
        
        // Les modals d'avis ne s'affichent plus automatiquement
        // Elles s'ouvrent uniquement via un clic utilisateur
        console.log('‚úÖ Notifications charg√©es, pas d\'affichage automatique de modal')
      } else if (error) {
        console.error('‚ùå Erreur lors du chargement des notifications:', error)
      }
    }

    fetchNotifications()
  }, [userId])

  // V√©rification p√©riodique des r√©servations expir√©es (toutes les 5 minutes)
  useEffect(() => {
    if (!userId) return;

    const interval = setInterval(() => {
      console.log('‚è∞ V√©rification p√©riodique des r√©servations expir√©es...');
      checkAndUpdateExpiredReservations();
    }, 5 * 60 * 1000); // 5 minutes

    return () => clearInterval(interval);
  }, [userId])

  // 2. √âcouter les nouvelles notifications en temps r√©el
  useEffect(() => {
    if (!userId) return

    console.log('üîî Activation des notifications temps r√©el pour userId:', userId)

    const subscription = supabase
      .channel('notifications-realtime')
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'notifications',
        filter: `user_id=eq.${userId}`
      }, (payload) => {
        console.log('üÜï Nouvelle notification re√ßue:', payload.new)
        
        const newNotification = payload.new
        setNotifications(prev => [newNotification, ...prev])

        // Les nouvelles notifications d'avis ne d√©clenchent plus automatiquement de modal
        // Un highlight sera affich√© pour attirer l'attention
        if (newNotification.type === 'avis') {
          console.log('‚≠ê Nouvelle notification d\'avis re√ßue (pas d\'ouverture auto):', newNotification.id)
        }
      })
      .subscribe()

    return () => {
      console.log('üîå D√©connexion des notifications temps r√©el')
      subscription.unsubscribe()
    }
  }, [userId, showRatingModal])

  // 3. D√©clenchement manuel du modal d'avis (appel√© depuis notification.js)
  useEffect(() => {
    if (triggerNotification) {
      console.log('üéØ D√©clenchement manuel du modal d\'avis:', triggerNotification)
      setCurrentRatingRequest(triggerNotification)
      setShowRatingModal(true)
      setRating(0)
      setComment('')
    }
  }, [triggerNotification])

  // 4. Soumettre la notation avec logique am√©lior√©e utilisant les IDs directs
  const submitRating = async () => {
    if (!currentRatingRequest || rating === 0) {
      alert('Veuillez s√©lectionner une note de 1 √† 5 √©toiles')
      return
    }

    setIsSubmitting(true)

    try {
      // Utiliser directement les IDs de la notification plut√¥t que de chercher
      const notification = currentRatingRequest
      let annonceId = null
      let entityType = null
      let entityId = null

      // 1. Priorit√© aux IDs directs de la notification
      if (notification.annonce_id) {
        annonceId = notification.annonce_id
        console.log('üéØ Annonce ID trouv√© directement dans la notification:', annonceId)
      }

      if (notification.commande_id) {
        entityType = 'commande'
        entityId = notification.commande_id
        console.log('üéØ Commande ID trouv√©:', entityId)
      } else if (notification.reservation_id) {
        entityType = 'reservation'
        entityId = notification.reservation_id
        console.log('üéØ R√©servation ID trouv√©:', entityId)
      }

      // 2. Si pas d'annonce_id direct, chercher via l'entit√©
      if (!annonceId && entityType && entityId) {
        console.log(`üîç Recherche de l'annonce via ${entityType}:`, entityId)
        
        const { data: entityData, error: entityError } = await supabase
          .from(entityType === 'commande' ? 'commandes' : 'reservations')
          .select('annonce_id')
          .eq('id', entityId)
          .single()

        if (entityError) {
          console.error(`‚ùå Erreur lors de la recherche de l'annonce via ${entityType}:`, entityError)
          throw new Error(`Impossible de trouver l'annonce associ√©e √† la ${entityType}`)
        }

        if (!entityData?.annonce_id) {
          console.error(`‚ùå Aucune annonce trouv√©e pour ${entityType} ID:`, entityId)
          throw new Error(`Aucune annonce associ√©e √† cette ${entityType}`)
        }

        annonceId = entityData.annonce_id
        console.log('‚úÖ Annonce ID trouv√© via entit√©:', annonceId)
      }

      // 3. Validation finale
      if (!annonceId) {
        console.error('‚ùå Impossible de d√©terminer l\'ID de l\'annonce:', notification)
        throw new Error('Impossible de trouver l\'annonce pour cet avis')
      }

      // 4. Soumission de l'avis
      console.log('üìù Soumission avis - Annonce ID:', annonceId, 'Note:', rating)

      const { error: avisError } = await supabase
        .from('avis')
        .insert({
          annonce_id: annonceId,
          user_id: userId,
          rating: rating,
          comment: comment.trim() || null,
          commande_id: notification.commande_id || null,
          reservation_id: notification.reservation_id || null
        })

      if (avisError) {
        console.error('‚ùå Erreur lors de la soumission de l\'avis:', avisError)
        throw avisError
      }

      // 5. Marquer la notification comme lue
      const { error: updateError } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notification.id)

      if (updateError) {
        console.warn('‚ö†Ô∏è Erreur lors de la mise √† jour de la notification:', updateError)
      }

      console.log('‚úÖ Avis soumis avec succ√®s!')
      alert('Merci pour votre avis !')

      // Reset du modal
      setShowRatingModal(false)
      setCurrentRatingRequest(null)
      setRating(0)
      setComment('')

      // Actualiser les notifications
      const { data: updatedNotifications } = await supabase
        .from('notifications')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })

      if (updatedNotifications) {
        setNotifications(updatedNotifications)
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la soumission:', error)
      alert(`Erreur: ${error.message}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  // 5. Fermer la modal (reporter √† plus tard)
  const closeModal = async () => {
    if (currentRatingRequest) {
      console.log('üîÑ Reporter √† plus tard - marquage notification comme lue:', currentRatingRequest.id)
      // Marquer comme lue mais sans rating
      const { error } = await supabase
        .from('notifications')
        .update({ lu: true })
        .eq('id', currentRatingRequest.id)
      
      if (error) {
        console.error('‚ùå Erreur lors du marquage comme lue:', error)
      } else {
        console.log('‚úÖ Notification report√©e avec succ√®s')
      }
      
      setNotifications(prev => prev.filter(n => n.id !== currentRatingRequest.id))
    }
    
    console.log('üö™ Fermeture de la modal (reporter)')
    setShowRatingModal(false)
    setCurrentRatingRequest(null)
    setRating(0)
    setComment('')
  }

  // 6. Composant Star Rating am√©lior√©
  const StarRating = ({ rating, onRatingChange }) => {
    const [hoverRating, setHoverRating] = useState(0)
    
    return (
      <View style={{ flexDirection: 'row', gap: 8, justifyContent: 'center', paddingVertical: 8 }}>
        {[1, 2, 3, 4, 5].map((star) => (
          <TouchableOpacity
            key={star}
            onPress={() => onRatingChange(star)}
          >
            <Text style={{ fontSize: 32, transform: [{ scale: star <= rating ? 1.1 : 1 }] }}>
              {star <= rating ? '‚≠ê' : '‚òÜ'}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    )
  }

  return (
    <View>
      {showRatingModal && currentRatingRequest && (
        <View style={{ position: 'fixed', inset: 0, zIndex: 50 }}>
          <View style={{ position: 'fixed', inset: 0, backgroundColor: 'rgba(255,255,255,0.4)' }} />
          <TouchableOpacity 
            style={{ position: 'fixed', inset: 0, backgroundColor: 'rgba(255,255,255,0.4)' }}
            onPress={closeModal}
          />
          
          <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 16 }}>
            <View style={{ backgroundColor: '#fff', borderRadius: 16, maxWidth: 320, width: '100%' }}>
              
              <View style={{ backgroundColor: '#3B82F6', borderTopLeftRadius: 12, borderTopRightRadius: 12, padding: 24, alignItems: 'center' }}>
                <View style={{ width: 64, height: 64, backgroundColor: 'rgba(255,255,255,0.2)', borderRadius: 32, alignItems: 'center', justifyContent: 'center', marginBottom: 12 }}>
                  <Text style={{ fontSize: 32 }}>üéâ</Text>
                </View>
                <Text style={{ fontSize: 18, fontWeight: 'bold', color: '#fff', marginBottom: 8 }}>
                  {currentRatingRequest.reservation_id ? 'R√©servation termin√©e !' : 'Commande livr√©e !'}
                </Text>
                <Text style={{ color: 'rgba(255,255,255,0.8)', fontSize: 12 }}>
                  Aidez la communaut√© en partageant votre exp√©rience
                </Text>
              </View>

              <View style={{ padding: 24 }}>
                <View style={{ backgroundColor: '#F3F4F6', borderRadius: 8, padding: 16, marginBottom: 24 }}>
                  <Text style={{ color: '#374151', textAlign: 'center', lineHeight: 20 }}>
                    {currentRatingRequest.contenu}
                  </Text>
                </View>

                <View style={{ marginBottom: 24 }}>
                  <Text style={{ fontSize: 14, fontWeight: '600', color: '#1F2937', marginBottom: 16, textAlign: 'center' }}>
                    Quelle note donnez-vous √† cette prestation ?
                  </Text>
                  
                  <View style={{ backgroundColor: '#fff', borderRadius: 8, borderWidth: 2, borderColor: '#E5E7EB', padding: 16, marginBottom: 8 }}>
                    <StarRating rating={rating} onRatingChange={setRating} />
                  </View>
                  
                  {rating > 0 && (
                    <Text style={{ fontSize: 12, color: '#6B7280', textAlign: 'center' }}>
                      {rating === 5 && "‚≠ê Excellent !"}
                      {rating === 4 && "üòä Tr√®s bien !"}
                      {rating === 3 && "üëç Bien"}
                      {rating === 2 && "üòê Moyen"}
                      {rating === 1 && "üòû D√©cevant"}
                    </Text>
                  )}
                </View>

                <View style={{ marginBottom: 24 }}>
                  <Text style={{ fontSize: 12, fontWeight: '500', color: '#374151', marginBottom: 8 }}>
                    Commentaire (optionnel)
                  </Text>
                  {/* Removed: textarea implementation as it's web-only; using TextInput would require React Native */}
                  <View style={{ marginTop: 8 }}>
                    <Text style={{ fontSize: 10, color: '#999', textAlign: 'right' }}>
                      {comment.length}/500
                    </Text>
                  </View>
                </View>

                <View style={{ flexDirection: 'row', gap: 12 }}>
                  <TouchableOpacity
                    onPress={closeModal}
                    disabled={isSubmitting}
                    style={{ flex: 1, paddingVertical: 12, paddingHorizontal: 24, borderRadius: 8, borderWidth: 2, borderColor: '#E5E7EB', opacity: isSubmitting ? 0.5 : 1 }}
                  >
                    <Text style={{ color: '#4B5563', textAlign: 'center', fontWeight: '500' }}>Reporter √† plus tard</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity
                    onPress={submitRating}
                    disabled={isSubmitting || rating === 0}
                    style={{ flex: 1, paddingVertical: 12, paddingHorizontal: 24, borderRadius: 8, backgroundColor: '#3B82F6', opacity: isSubmitting || rating === 0 ? 0.5 : 1 }}
                  >
                    <Text style={{ color: '#fff', textAlign: 'center', fontWeight: '500' }}>
                      {isSubmitting ? '‚è≥ Envoi en cours...' : '‚ú® Publier mon avis'}
                    </Text>
                  </TouchableOpacity>
                </View>

                <View style={{ marginTop: 16 }}>
                  <Text style={{ fontSize: 11, color: '#999', textAlign: 'center' }}>üîí Votre avis sera publi√© de mani√®re anonyme</Text>
                </View>
              </View>
            </View>
          </View>
        </View>
      )}
    </View>
  )
}